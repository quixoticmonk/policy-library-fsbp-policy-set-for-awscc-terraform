# This policy requires a log metric filter and alarm for Management Console sign-in without MFA.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports
import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants
const = {
	"resource_awscc_logs_metric_filter": "awscc_logs_metric_filter",
	"resource_awscc_cloudwatch_alarm":   "awscc_cloudwatch_alarm",
	"message":                           "A log metric filter and alarm should exist for Management Console sign-in without MFA. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/cloudwatch-controls.html#cloudwatch-3 for more details.",
	"policy_name":                       "cloudwatch-console-signin-without-mfa-alarm",
	"constant_value":                    "constant_value",
	"filter_pattern":                    "filter_pattern",
	"metric_transformations":            "metric_transformations",
	"metric_name":                       "metric_name",
	"alarm_actions":                     "alarm_actions",
	"metric_name_key":                   "metric_name",
	"comparison_operator":               "comparison_operator",
	"evaluation_periods":                "evaluation_periods",
	"threshold":                         "threshold",
	"statistic":                         "statistic",
	"period":                            "period",
}

# Variables
metric_filters = tf.config(tfconfig.resources).type(const.resource_awscc_logs_metric_filter).resources
alarms = tf.config(tfconfig.resources).type(const.resource_awscc_cloudwatch_alarm).resources

# Check if there's at least one metric filter for console sign-in without MFA
signin_without_mfa_filter_exists = false
signin_without_mfa_metric_name = ""

for metric_filters as address, resource {
	filter_pattern_path = "config." + const.filter_pattern
	filter_pattern = maps.get(resource, filter_pattern_path + "." + const.constant_value, "")

	# Check if filter pattern contains console sign-in without MFA detection pattern
	# The pattern should match events for console logins that don't have MFA
	if filter_pattern matches ".*[\\s\\S]*ConsoleLogin[\\s\\S]*.*" and
		filter_pattern matches ".*[\\s\\S]*additionalEventData.MFAUsed[\\s\\S]*.*" and
		filter_pattern matches ".*[\\s\\S]*No[\\s\\S]*.*" {

		# Get the metric name from the filter's metric transformations
		metric_transformations_path = "config." + const.metric_transformations
		if maps.get(resource, metric_transformations_path, false) is not false {
			transformations = maps.get(resource, metric_transformations_path, [])
			if length(transformations) > 0 {
				for transformations as idx, transform {
					metric_name_path = const.metric_name_key
					if maps.get(transform, metric_name_path + "." + const.constant_value, "") is not "" {
						signin_without_mfa_filter_exists = true
						signin_without_mfa_metric_name = maps.get(transform, metric_name_path + "." + const.constant_value, "")
					}
				}
			}
		}
	}
}

# Check if there's at least one alarm configured for the console sign-in without MFA metric
signin_without_mfa_alarm_exists = false

if signin_without_mfa_filter_exists and signin_without_mfa_metric_name is not "" {
	for alarms as address, alarm {
		alarm_metric_name_path = "config." + const.metric_name
		alarm_metric_name = maps.get(alarm, alarm_metric_name_path + "." + const.constant_value, "")

		if alarm_metric_name == signin_without_mfa_metric_name {
			# Check if alarm has actions configured
			alarm_actions_path = "config." + const.alarm_actions
			if maps.get(alarm, alarm_actions_path, false) is not false {
				alarm_actions = maps.get(alarm, alarm_actions_path, [])
				if length(alarm_actions) > 0 {
					signin_without_mfa_alarm_exists = true
				}
			}
		}
	}
}

# Main rule
main = rule {
	signin_without_mfa_filter_exists and signin_without_mfa_alarm_exists
}
