# This policy requires resources of type `awscc_sns_topic` to have delivery status logging enabled.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "strings"

# Constants

const = {
	"policy_name":              "sns-delivery-status-logging-enabled",
	"message":                  "Logging of delivery status should be enabled for notification messages sent to a topic. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-sns-2 for more details.",
	"resource_awscc_sns_topic": "awscc_sns_topic",
	"http":                      "http",
	"sqs":                       "sqs",
	"lambda":                    "lambda",
	"application":               "application",
	"firehose":                  "firehose",
	"success_feedback_role_arn": "success_feedback_role_arn",
	"failure_feedback_role_arn": "failure_feedback_role_arn",
}

# Get all SNS topic resources
allSNSTopics = filter tfconfig.resources as address, r {
	r.type is const.resource_awscc_sns_topic
}

# Find violations - SNS topics without delivery status logging
violations = []

for allSNSTopics as address, topic {
	topic_config = topic.config
	has_logging = false

	# Check for HTTP protocol logging
	http_success_logging = topic_config[const.http + "_" + const.success_feedback_role_arn] else null is not null
	http_failure_logging = topic_config[const.http + "_" + const.failure_feedback_role_arn] else null is not null
	http_logging = http_success_logging and http_failure_logging

	# Check for SQS protocol logging
	sqs_success_logging = topic_config[const.sqs + "_" + const.success_feedback_role_arn] else null is not null
	sqs_failure_logging = topic_config[const.sqs + "_" + const.failure_feedback_role_arn] else null is not null
	sqs_logging = sqs_success_logging and sqs_failure_logging

	# Check for Lambda protocol logging
	lambda_success_logging = topic_config[const.lambda + "_" + const.success_feedback_role_arn] else null is not null
	lambda_failure_logging = topic_config[const.lambda + "_" + const.failure_feedback_role_arn] else null is not null
	lambda_logging = lambda_success_logging and lambda_failure_logging

	# Check for Application protocol logging
	application_success_logging = topic_config[const.application + "_" + const.success_feedback_role_arn] else null is not null
	application_failure_logging = topic_config[const.application + "_" + const.failure_feedback_role_arn] else null is not null
	application_logging = application_success_logging and application_failure_logging

	# Check for Firehose protocol logging
	firehose_success_logging = topic_config[const.firehose + "_" + const.success_feedback_role_arn] else null is not null
	firehose_failure_logging = topic_config[const.firehose + "_" + const.failure_feedback_role_arn] else null is not null
	firehose_logging = firehose_success_logging and firehose_failure_logging

	# At least one protocol should have both success and failure logging enabled
	has_logging = http_logging or sqs_logging or lambda_logging or application_logging or firehose_logging

	if not has_logging {
		append(violations, topic)
	}
}

# Print violations for debugging
if length(violations) > 0 {
	print("SNS topics without delivery status logging enabled:")
	for violations as _, v {
		print("  *", v.address)
	}
}

# Rules
main = rule {
	length(violations) is 0
}
