# This policy requires resources of type `awscc_secretsmanager_secret` to have rotation configured within a specified number of days.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "strings"

# Constants

const = {
	"policy_name": "secretsmanager-rotation-within-days",
	"message":     "Secrets Manager secrets should be rotated within 90 days. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-secretsmanager-4 for more details.",
	"address":     "address",
	"resource_awscc_secretsmanager_secret": "awscc_secretsmanager_secret",
	"config":                   "config",
	"constant_value":           "constant_value",
	"rotation_enabled":         "rotation_enabled",
	"rotation_rules":           "rotation_rules",
	"automatically_after_days": "automatically_after_days",
	"max_rotation_days":        90,
	"module_prefix":            "module.",
	"module_address":           "module_address",
}

# Functions

# Removes module address prefix from a resource
# and returns back the localized address for a module.
resource_address_without_module_address = func(res) {
	resource_addr = res[const.address]

	# Check for root module
	if not strings.has_prefix(resource_addr, const.module_prefix) {
		return resource_addr
	}

	module_addr_prefix = res[const.module_address] + "."
	return strings.trim_prefix(resource_addr, module_addr_prefix)
}

# Check if a Secret has rotation enabled and configured within the specified days
has_valid_rotation_period = func(secret) {
	if not (secret[const.config] is defined) {
		return false
	}

	if not (secret[const.config][const.rotation_enabled] is defined) {
		return false
	}

	rotation_enabled_value = secret[const.config][const.rotation_enabled]

	# Check if rotation_enabled is set to true
	if not (rotation_enabled_value[const.constant_value] is true) {
		return false
	}

	# Check if rotation_rules is defined
	if not (secret[const.config][const.rotation_rules] is defined) {
		return false
	}

	rotation_rules = secret[const.config][const.rotation_rules]

	# Check if automatically_after_days is defined
	if not (rotation_rules[const.constant_value] is defined and
		rotation_rules[const.constant_value][const.automatically_after_days] is defined) {
		return false
	}

	# Check if rotation period is within the maximum allowed days
	days = rotation_rules[const.constant_value][const.automatically_after_days]
	return days <= const.max_rotation_days
}

# Variables

config_resources = tf.config(tfconfig.resources)

# Get all Secrets Manager secret resources
secret_resources = config_resources.type(const.resource_awscc_secretsmanager_secret).resources

# Find violations - Secrets without valid rotation period
violations = []

for secret_resources as _, secret {
	if not has_valid_rotation_period(secret) {
		append(violations, secret)
	}
}

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
