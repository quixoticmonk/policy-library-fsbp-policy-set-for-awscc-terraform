# This policy requires the S3 bucket associated with a cloud trail to be not publicly accessible.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                            "cloudtrail-logs-bucket-not-public",
	"message":                                "S3 bucket used to store cloudtrail logs must not be publicly accessible. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/cloudtrail-controls.html#cloudtrail-6 for more details.",
	"resource_awscc_cloudtrail":              "awscc_cloudtrail_trail",
	"resource_awscc_s3_bucket":               "awscc_s3_bucket",
	"resource_s3_bucket_public_access_block": "awscc_s3_bucket_public_access_block",
	"resource_awscc_s3_bucket_acl":           "awscc_s3_bucket_acl",
	"constant_value":                         "constant_value",
	"private":                                "private",
}

# Functions

get_complaint_s3_bucket_acl_resources = func(res) {
	return collection.reject(res, func(res) {
		acl_value = maps.get(res, "config.acl", "")
		if acl_value == "" {
			return true
		}
		return not (maps.get(acl_value, const.constant_value, "") is const.private)
	})
}

# Resolve the bucket name from the bucket expression
# Example bucket expression - bucket_exp = {"references": ["awscc_s3_bucket.bucket.id", "awscc_s3_bucket.bucket"]}
# Example bucket expression - bucket_exp = {"constant_value": "my-bucket"}
resolve_s3_bucket_name = func(bucket_exp, module_address) {
	if bucket_exp is null {
		return ""
	}
	if maps.get(bucket_exp, const.constant_value, "") is not empty {
		return bucket_exp[const.constant_value]
	} else if maps.get(bucket_exp, "references", []) is not empty {
		# Example References - bucket_exp["references"] = ["awscc_s3_bucket.bucket.id", "awscc_s3_bucket.bucket"]
		# We get the resource from the address which is the second element in the references array
		if (length(bucket_exp["references"]) < 2) {
			return ""
		}
		bucket_addr = bucket_exp["references"][1]

		// We don't support variable/locals based references
		if bucket_addr is not defined {
			return ""
		}

		// Prefix the module address with the bucket address
		// to make stuff work for nested modules
		if module_address is not "" {
			bucket_addr = module_address + "." + bucket_addr
		}

		bucket_res = tf.config(tfconfig.resources).address(bucket_addr).resources
		if bucket_res is not empty {
			return maps.get(bucket_res[0], "config.bucket.constant_value", "")
		}
	}
	return ""
}

# Variables

config_resources = tf.config(tfconfig.resources)

s3_bucket_public_access_block_res = config_resources.type(const.resource_s3_bucket_public_access_block).resources
s3_bucket_acl_res = config_resources.type(const.resource_awscc_s3_bucket_acl).resources
s3_bucket_inline_acl_res = config_resources.type(const.resource_awscc_s3_bucket).resources

compliant_s3_bucket_public_access_block_resources = collection.reject(s3_bucket_public_access_block_res, func(res) {
	return not (maps.get(res, "config.ignore_public_acls.constant_value", false) and
		maps.get(res, "config.block_public_acls.constant_value", false) and
		maps.get(res, "config.restrict_public_buckets.constant_value", false) and
		maps.get(res, "config.block_public_policy.constant_value", false))
})

compliant_s3_bucket_acl_block_resources = get_complaint_s3_bucket_acl_resources(s3_bucket_acl_res)
compliant_s3_bucket_inline_acl_block_resources = get_complaint_s3_bucket_acl_resources(s3_bucket_inline_acl_res)

compliant_s3_bucket_resources = compliant_s3_bucket_public_access_block_resources + compliant_s3_bucket_acl_block_resources + compliant_s3_bucket_inline_acl_block_resources

private_bucket_names = []

for compliant_s3_bucket_resources as _, res {
	bucket_name = resolve_s3_bucket_name(maps.get(res, "config.bucket", {}), res.module_address)
	if bucket_name is not empty {
		append(private_bucket_names, bucket_name)
	}
}

resources = config_resources.type(const.resource_awscc_cloudtrail).resources
violations = collection.reject(resources, func(res) {
	bucket_name = resolve_s3_bucket_name(maps.get(res, "config.s3_bucket_name", {}), res.module_address)
	return bucket_name is empty or bucket_name in private_bucket_names
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
