# This policy requires S3 buckets to require requests to use Secure Socket Layer

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports
import "tfconfig/v2" as tfconfig

# Constants
const = {
	"resource_awscc_s3_bucket": "awscc_s3_bucket",
	"bucket_name":              "bucket",
	"constant_value":           "constant_value",
}

# Get all S3 bucket resources
allS3Buckets = filter tfconfig.resources as address, r {
	r.type is const.resource_awscc_s3_bucket
}

# Get all S3 bucket policy resources
allS3BucketPolicies = filter tfconfig.resources as address, r {
	r.type is "awscc_s3_bucket_policy"
}

# Find violations - S3 buckets without SSL-only policy
violations = []

# Check if bucket has a policy requiring SSL
for allS3Buckets as address, bucket {
	bucket_name = ""
	if bucket.config[const.bucket_name] else null is not null {
		if bucket.config[const.bucket_name][const.constant_value] else null is not null {
			bucket_name = bucket.config[const.bucket_name][const.constant_value]
		}
	}

	has_ssl_policy = false

	# Check if there's a bucket policy for this bucket
	for allS3BucketPolicies as policy_address, policy {
		policy_bucket = ""
		if policy.config["bucket"] else null is not null {
			if policy.config["bucket"][const.constant_value] else null is not null {
				policy_bucket = policy.config["bucket"][const.constant_value]
			}
		}

		if policy_bucket is bucket_name {
			# Check if policy document contains SSL requirement
			policy_doc = ""
			if policy.config["policy_document"] else null is not null {
				if policy.config["policy_document"][const.constant_value] else null is not null {
					policy_doc = policy.config["policy_document"][const.constant_value]
				}
			}

			if policy_doc matches "\"aws:SecureTransport\"\\s*:\\s*\"false\"" and
				policy_doc matches "\"Effect\"\\s*:\\s*\"Deny\"" {
				has_ssl_policy = true
			}
		}
	}

	if not has_ssl_policy {
		append(violations, bucket)
	}
}

# Print violations for debugging
if length(violations) > 0 {
	print("S3 buckets without SSL-only policy:")
	for violations as _, v {
		print("  *", v.address)
	}
}

# Rules
main = rule {
	length(violations) is 0
}
