# This policy requires resources of type `awscc_sqs_queue` to have encryption at rest enabled using AWS KMS.

# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: BUSL-1.1

# Imports
import "tfconfig/v2" as tfconfig
import "strings"

# Constants
const = {
	"policy_name":              "sqs-queues-encrypted-at-rest",
	"message":                  "SQS queues should be encrypted at rest using AWS KMS. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-controls.html#fsbp-sqs-1 for more details.",
	"resource_awscc_sqs_queue": "awscc_sqs_queue",
	"kms_master_key_id":        "kms_master_key_id",
	"sqs_managed_sse_enabled":  "sqs_managed_sse_enabled",
	"constant_value":           "constant_value",
}

# Get all SQS queue resources
allSQSQueues = filter tfconfig.resources as address, r {
	r.type is const.resource_awscc_sqs_queue
}

# Find violations - SQS queues without encryption at rest
violations = []

for allSQSQueues as address, queue {
	queue_config = queue.config

	# Check if KMS master key ID is set or SQS managed SSE is enabled
	has_kms_key = false
	has_sqs_sse = false

	# Check for KMS key
	if queue_config[const.kms_master_key_id] else null is not null {
		kms_key_attr = queue_config[const.kms_master_key_id]
		if kms_key_attr[const.constant_value] else "" is not "" {
			has_kms_key = true
		}
	}

	# Check for SQS managed SSE
	if queue_config[const.sqs_managed_sse_enabled] else null is not null {
		sqs_sse_attr = queue_config[const.sqs_managed_sse_enabled]
		if sqs_sse_attr[const.constant_value] else false is true {
			has_sqs_sse = true
		}
	}

	# If neither encryption option is enabled, add to violations
	if not (has_kms_key or has_sqs_sse) {
		append(violations, queue)
	}
}

# Print violations for debugging
if length(violations) > 0 {
	print("SQS queues without encryption at rest enabled:")
	for violations as _, v {
		print("  *", v.address)
	}
}

# Rules
main = rule {
	length(violations) is 0
}
